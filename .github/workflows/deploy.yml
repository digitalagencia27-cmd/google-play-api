name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths: [ '!PostmanCollections/**' , '!./github/**' ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install
      
      - name: Start Server
        run: npm start & npx wait-on http://localhost:3000

      - name: Run Tests
        run: npm test

  build_and_push_docker_image:
    needs: build_and_test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64 -t ghcr.io/${{ github.repository }}:latest .
          docker buildx stop
          
  deploy_to_fly:
    needs: build_and_push_docker_image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      
      - name: Get FlyCtl
        uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Deploy to Fly        
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      
      - name: Get deploy url
        run: FLY_DEPLOY_URL=$(flyctl status --app googleplayapi -j | jq -r '.url')

      - name: Set FLY_DEPLOY_URL
        run: echo "FLY_DEPLOY_URL=$FLY_DEPLOY_URL" >> $GITHUB_ENV

        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}


      - name: Create Deployment Status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentUrl = process.env.FLY_DEPLOY_URL;            

            await github.repos.createDeploymentStatus({
              ...context.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              log_url: deploymentUrl,
              description: 'Deployment to Fly.io',
              environment_url: deploymentUrl,
            });
